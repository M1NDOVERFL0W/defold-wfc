require("libwfc.xmlsimple")

local tinsert = table.insert
local program = require("libwfc.program") 
local xdocument = newParser()

--------------------------------------------------------------------------------

local WINDOW_SCALE 		= 1.5
local AGENT_DATASIZE 	= 10

local LINECOL 			= 140
local DEFAULT_WIDTH 	= 100
local DEFAULT_HEIGHT	= 100
local DEFAULT_PERIODIC  = true
local DEFAULT_BLACKBACKGROUND = false
local DEFAULT_DIM 		= 48

local SAMPLES 			= {}
local SAMPLES_RUNNABLES	= {}


local MODEL 			= { "Simple Tiled Model", "Overlapped Model" }
local MODEL_HEURISTIC 	= { "Entropy", "MRV", "Scanline" }

--------------------------------------------------------------------------------

local function drawBuffer( self )

	if(self.image_select == nil) then return end 

	local finfo = self.totalfiles[self.image_select]
	if(finfo) then 
		drawpixels.fill(self.buffer_info, 255, 255, 255, 255)

		self.stream = buffer.get_stream(self.buffer_info.buffer, hash("rgba"))

		local w, h, c, data = libwfc.image_get( finfo.id )
		for i = 1, w * h * 4 do
			self.stream[i] = string.byte(data, i)
		end
		resource.set_texture(self.resource_path, self.header, self.buffer_info.buffer)
	else
		self.totalfiles[self.image_select] = nil
		self.image_select = nil 
	end
end 

--------------------------------------------------------------------------------

local function runNext(self)

	local v = SAMPLES_RUNNABLES[ self.selected_sample ]
	if(v) then 
		program.checkProps( self, v.e, v.overlap )
		if( self.running_model) then 
			self.image_select = self.image_select or 1
			-- drawBuffer(self)
		end
	end 
end 

--------------------------------------------------------------------------------

local function set_style()
	imgui.set_style_window_rounding(0)
	imgui.set_style_frame_rounding(0)
	imgui.set_style_scrollbar_rounding(2)
	imgui.set_style_tab_rounding(2)
	imgui.set_style_color(imgui.ImGuiCol_Text, 0.90, 0.90, 0.90, 0.90)
	imgui.set_style_color(imgui.ImGuiCol_TextDisabled, 0.60, 0.60, 0.60, 1.00)
	imgui.set_style_color(imgui.ImGuiCol_WindowBg, 0.09, 0.09, 0.15, 1.00)
	imgui.set_style_color(imgui.ImGuiCol_ChildBg, 0.09, 0.09, 0.15, 1.00)
	imgui.set_style_color(imgui.ImGuiCol_PopupBg, 0.05, 0.05, 0.10, 0.85)
	imgui.set_style_color(imgui.ImGuiCol_Border, 0.70, 0.70, 0.70, 0.65)
	imgui.set_style_color(imgui.ImGuiCol_BorderShadow, 0.00, 0.00, 0.00, 0.00)
	imgui.set_style_color(imgui.ImGuiCol_FrameBg, 0.00, 0.00, 0.01, 1.00)
	imgui.set_style_color(imgui.ImGuiCol_FrameBgHovered, 0.90, 0.80, 0.80, 0.40)
	imgui.set_style_color(imgui.ImGuiCol_FrameBgActive, 0.90, 0.65, 0.65, 0.45)
	imgui.set_style_color(imgui.ImGuiCol_TitleBg, 0.00, 0.00, 0.00, 0.83)
	imgui.set_style_color(imgui.ImGuiCol_TitleBgCollapsed, 0.40, 0.40, 0.80, 0.20)
	imgui.set_style_color(imgui.ImGuiCol_TitleBgActive, 0.00, 0.00, 0.00, 0.87)
	imgui.set_style_color(imgui.ImGuiCol_MenuBarBg, 0.01, 0.01, 0.02, 0.80)
	imgui.set_style_color(imgui.ImGuiCol_ScrollbarBg, 0.20, 0.25, 0.30, 0.60)
	imgui.set_style_color(imgui.ImGuiCol_ScrollbarGrab, 0.55, 0.53, 0.55, 0.51)
	imgui.set_style_color(imgui.ImGuiCol_ScrollbarGrabHovered, 0.56, 0.56, 0.56, 1.00)
	imgui.set_style_color(imgui.ImGuiCol_ScrollbarGrabActive, 0.56, 0.56, 0.56, 0.91)
	imgui.set_style_color(imgui.ImGuiCol_CheckMark, 0.90, 0.90, 0.90, 0.83)
	imgui.set_style_color(imgui.ImGuiCol_SliderGrab, 0.70, 0.70, 0.70, 0.62)
	imgui.set_style_color(imgui.ImGuiCol_SliderGrabActive, 0.30, 0.30, 0.30, 0.84)
	imgui.set_style_color(imgui.ImGuiCol_Button, 0.48, 0.72, 0.89, 0.49)
	imgui.set_style_color(imgui.ImGuiCol_ButtonHovered, 0.50, 0.69, 0.99, 0.68)
	imgui.set_style_color(imgui.ImGuiCol_ButtonActive, 0.80, 0.50, 0.50, 1.00)
	imgui.set_style_color(imgui.ImGuiCol_Header, 0.30, 0.69, 1.00, 0.53)
	imgui.set_style_color(imgui.ImGuiCol_HeaderHovered, 0.44, 0.61, 0.86, 1.00)
	imgui.set_style_color(imgui.ImGuiCol_HeaderActive, 0.38, 0.62, 0.83, 1.00)
	imgui.set_style_color(imgui.ImGuiCol_ResizeGrip, 1.00, 1.00, 1.00, 0.85)
	imgui.set_style_color(imgui.ImGuiCol_ResizeGripHovered, 1.00, 1.00, 1.00, 0.60)
	imgui.set_style_color(imgui.ImGuiCol_ResizeGripActive, 1.00, 1.00, 1.00, 0.90)
	imgui.set_style_color(imgui.ImGuiCol_PlotLines, 1.00, 1.00, 1.00, 1.00)
	imgui.set_style_color(imgui.ImGuiCol_PlotLinesHovered, 0.90, 0.70, 0.00, 1.00)
	imgui.set_style_color(imgui.ImGuiCol_PlotHistogram, 0.90, 0.70, 0.00, 1.00)
	imgui.set_style_color(imgui.ImGuiCol_PlotHistogramHovered, 1.00, 0.60, 0.00, 1.00)
	imgui.set_style_color(imgui.ImGuiCol_TextSelectedBg, 0.00, 0.00, 1.00, 0.35)
	imgui.set_style_color(imgui.ImGuiCol_Tab, 0.48, 0.72, 0.89, 0.49)
		
end

--------------------------------------------------------------------------------

local function startSim(self)
	self.selected_model 	= 1
	self.selected_sample 	= 1
	self.model_width 		= DEFAULT_WIDTH
	self.model_height 		= DEFAULT_HEIGHT
	self.model_periodic 	= DEFAULT_PERIODIC
	self.black_background 	= DEFAULT_BLACKBACKGROUND

	self.model_heuristic 	= 1
	self.model_N 			= 1
	self.model_periodicInput = true
	self.model_symmetry 	= 8
	self.model_ground 		= false

	self.model_name 		= ""
	self.model_subset 		= ""
	self.model_subset_name 	= ""

	self.totalfiles			= {}

	self.image_select 		= nil

	self.image_tiles 		= {}
end

--------------------------------------------------------------------------------

local function stopSim(self)

end 

--------------------------------------------------------------------------------

local function updateSamples(self) 
	SAMPLES = {}
	for k,v in ipairs(self.runnable) do
		if(v) then
			SAMPLES_RUNNABLES[ k ] = v  
			tinsert(SAMPLES, v.e.props["name"]) 
		end
	end 
end

--------------------------------------------------------------------------------

local function getSampleParams( self)
	local v = SAMPLES_RUNNABLES[ self.selected_sample ]

	self.model_name			= v.e.props[ "name" ]
	self.model_size         = tonumber(v.e.props[ "size" ] or DEFAULT_DIM) 
	self.model_width        = tonumber(v.e.props[ "width" ] or self.model_size) 
	self.model_height       = tonumber(v.e.props[ "height" ] or self.model_size)
	self.model_periodic     = (string.lower(v.e.props[ "periodic" ] or "false") == "true")

	local heuristicString   = v.e.props[ "heuristic" ]
	if(heuristicString == "Entropy") then 
		self.model_heuristic = Heuristic.entropy
	elseif(heuristicString == "MRV") then 
		self.model_heuristic = Heuristic.mrv
	elseif(heuristicString == "Scanline") then 
		self.model_heuristic = Heuristic.scanline
	end

	self.model_N 			= tonumber(v.e.props["N"] or 3)  
	self.model_periodicInput 		= (string.lower(v.e.props["periodicInput"] or "true") == "true") 
	self.model_symmetry 			= tonumber(v.e.props["symmetry"] or 8) 
	self.model_ground 			= string.lower(v.e.props["ground"] or "false") == "true"

	self.model_subset 			= v.e.props["subset"] or ""
	self.model_blackBaground 		= (string.lower(v.e.props["blackBackground"] or "false") == "true") 

	-- Always reset this
	OverlappingModel.png_path = nil
	if( v.e.props["src"] ) then OverlappingModel.png_path = v.e.props["src"] end
end

--------------------------------------------------------------------------------

function init(self)

	msg.post("@render:", "clear_color", {color = vmath.vector4(1, 1, 1, 1)})
	-- size of texture when scaled to nearest power of two
	local width = 512
	local height = 512
	local channels = 4

	self.resource_path = go.get("/go#sprite", "texture0")
	self.resource_agent = go.get("/agent#sprite", "texture0")

	self.buffer_info = {
		buffer = buffer.create(width * height, {{name = hash("rgba"), type = buffer.VALUE_TYPE_UINT8, count = channels}}),
		width = width, height = height,	channels = channels
	}

	self.buffer_agent = {
		buffer = buffer.create(width * height, {{name = hash("rgba"), type = buffer.VALUE_TYPE_UINT8, count = channels}}),
		width = width, height = height,	channels = channels
	}

	self.header = {
		width 			= width, height = height, 
		type 			= resource.TEXTURE_TYPE_2D, 
		format 			= resource.TEXTURE_FORMAT_RGBA, 
		num_mip_maps 	= 1
	}

	drawpixels.fill(self.buffer_info, 255, 255, 0, 255)
	resource.set_texture(self.resource_path, self.header, self.buffer_info.buffer)

	drawpixels.fill(self.buffer_agent, 0, 255, 255, 255)
	resource.set_texture(self.resource_agent, self.header, self.buffer_agent.buffer)

	imgui.set_ini_filename()
	set_style()

	self.mouse = { x = 0, y = 0 }
	self.values_line = {}
	self.values_hist = {}

	local fontsize 		= 16.0
	local fontsizebase 	= 16.0
	self.fonts 	= {}
	-- local regular_data, error = sys.load_resource("/main/fonts/nokiafc22.ttf")
	-- self.fonts["Regular"] = imgui.font_add_ttf_data(regular_data, #regular_data, fontsize, fontsizebase)
	local regular_data, error = sys.load_resource("/main/fonts/Montserrat-Regular.ttf")
	self.fonts["Regular"] = imgui.font_add_ttf_data(regular_data, #regular_data, fontsize, fontsizebase)
	-- local bold_data, error = sys.load_resource("/main/fonts/Montserrat-Bold.ttf")
	-- self.fonts["Bold"] = imgui.font_add_ttf_data(bold_data, #bold_data, fontsize, fontsizebase)
	-- local italic_data, error = sys.load_resource("/main/fonts/Montserrat-Italic.ttf")
	-- self.fonts["Italic"] = imgui.font_add_ttf_data(italic_data, #italic_data, fontsize, fontsizebase)
	-- local bolditalic_data, error = sys.load_resource("/main/fonts/Montserrat-BoldItalic.ttf")
	-- self.fonts["BoldItalic"] = imgui.font_add_ttf_data(bolditalic_data, #bolditalic_data, fontsize, fontsizebase)

	startSim(self)
	-- pprint(self.iniTable)
	-- 		inifile.save('data/biosim4.ini', self.iniTable)

	program.main()
	self.runnable = program.runQ

	updateSamples(self)
	
	getSampleParams(self)
end

--------------------------------------------------------------------------------

local function tilemapNeighborMaker(self)

	if( self.model_name and self.image_tiles[self.model_name] == nil) then 
		self.image_tiles[self.model_name] = {}
		local xroot = xdocument:loadFile( SimpleTiledModel.base_path..self.model_name.."/data.xml")
		if(xroot) then 
			xroot = xroot:children()[1]
			local sprops = xroot:properties()
			xmlElementFilter( xroot, "tiles", function( tiles )
				xmlElementFilter( tiles.element, "tile", function( etile )
					local tilename = etile.props["name"]
					local filename = "samples/" .. self.model_name.."/"..tilename..".png"
					local bitmapid = imgui.image_load( filename )
					tinsert( self.image_tiles[self.model_name], bitmapid)
				end)
			end)
		end 
	end
	
	imgui.set_next_window_pos( 5, 265 * WINDOW_SCALE )
	imgui.set_next_window_size( 140 * WINDOW_SCALE, 373.5 * WINDOW_SCALE)

	local flags = imgui.WINDOWFLAGS_NOMOVE
	flags = bit.bor( flags, imgui.WINDOWFLAGS_NORESIZE )
	flags = bit.bor( flags, imgui.WINDOWFLAGS_NOCOLLAPSE )
	flags = bit.bor( flags, imgui.WINDOWFLAGS_NODECORATION )
	flags = bit.bor( flags, imgui.WINDOWFLAGS_ALWAYSVERTICALSCROLLBAR )
	imgui.begin_window("Load Tiles", false, flags)

-- 	imgui.draw_rect_filled( 15, 265 * WINDOW_SCALE , 140 * WINDOW_SCALE, 455 * WINDOW_SCALE, 0xffff0000 )
-- 
	if( self.model_name and self.image_tiles[self.model_name]) then 
		for k,v in ipairs(self.image_tiles[self.model_name]) do
			imgui.image_add(v, 125 * WINDOW_SCALE, 125 * WINDOW_SCALE)
		end
	end

	imgui.end_window()

	imgui.set_next_window_pos( 1 + 145 * WINDOW_SCALE, 265 * WINDOW_SCALE )
	imgui.set_next_window_size(173 * WINDOW_SCALE, 373.5 * WINDOW_SCALE)

	local flags = imgui.WINDOWFLAGS_NOMOVE
	flags = bit.bor( flags, imgui.WINDOWFLAGS_NORESIZE )
	flags = bit.bor( flags, imgui.WINDOWFLAGS_NOCOLLAPSE )
	flags = bit.bor( flags, imgui.WINDOWFLAGS_NODECORATION )
	imgui.begin_window("Arrange Tiles", false, flags)

	imgui.draw_rect_filled( 18 + 145 * WINDOW_SCALE, 265 * WINDOW_SCALE, 140 * WINDOW_SCALE, 355 * WINDOW_SCALE, 0xff00ff00 )

	imgui.end_window()
end

--------------------------------------------------------------------------------

local function textColorLabel( txt )
	imgui.text_colored(txt,  0.48, 0.72, 0.89, 1 ); imgui.same_line(LINECOL)
end 

local function update_tab1(self)

	local flags = imgui.WINDOWFLAGS_NOMOVE
	flags = bit.bor( flags, imgui.WINDOWFLAGS_NORESIZE )
	flags = bit.bor( flags, imgui.WINDOWFLAGS_NOCOLLAPSE )
	flags = bit.bor( flags, imgui.WINDOWFLAGS_HORIZONTALSCROLLBAR )
	
	imgui.begin_child("", 0, 260 * WINDOW_SCALE , false, flags)

	imgui.text_colored(" Choose Model Type: ", 1, 1, 0, 1 )

	local changed, modeltype = imgui.combo("##modeltype", self.selected_model, MODEL)
	if changed then
		self.selected_model = modeltype
	end

	imgui.separator()

	textColorLabel(" Name: ")
	changed, newname = imgui.input_text("##name", self.model_name)
	if(changed) then self.model_name = newname end

	textColorLabel(" Width: ")
	changed, w = imgui.input_int( "##width", self.model_width )
	if changed then self.model_width = w end

	textColorLabel(" Height: ")
	changed, h = imgui.input_int( "##height", self.model_height )
	if changed then self.model_height = h end 
		
	textColorLabel(" Periodic: ")
	changed, p = imgui.checkbox( "##periodic", self.model_periodic )
	if changed then self.model_periodic = p end 
			
	textColorLabel(" Model Heuristic: ")
	local changed, htype = imgui.combo("##heuristic", self.model_heuristic, MODEL_HEURISTIC)
	if changed then
		self.model_heuristic = htype
	end

	-- If simple tiled model set params 
	if(self.selected_model == 1) then 
		
		textColorLabel(" Subset Name: ")
		changed, newname = imgui.input_text("##subsetname ", self.model_subset)
		if(changed) then self.model_subset = newname end

		textColorLabel(" Black Background: ")
		changed, b = imgui.checkbox( "##blackbg", self.black_background )
		if changed then self.black_background = b end 
	end 
	-- If overlapped model set params
	if(self.selected_model == 2) then 

		textColorLabel(" N: ")
		changed, n = imgui.input_int( "##N", self.model_N )
		if changed then self.model_N = n end
		
		textColorLabel(" Periodic Input ")
		changed, p = imgui.checkbox( "##periodicInput", self.model_periodicInput )
		if changed then self.model_periodicInput = p end 

		textColorLabel(" Symmetry: ")
		changed, s = imgui.input_int( "##symmetry", self.model_symmetry )
		if changed then self.model_symmetry = s end

		textColorLabel(" Ground: ")
		changed, g = imgui.checkbox( "##ground", self.model_ground )
		if changed then self.model_ground = g end 
	end 
	
	imgui.end_child()
end

--------------------------------------------------------------------------------

local function makeData(self)
	self.values_line = {}
	self.values_hist = {}
	for i=1, 60 do 
		local data = math.random(1, 30)
		self.values_hist[data] = (self.values_hist[data] or 0) + 1
		table.insert(self.values_line, data)
	end
end

--------------------------------------------------------------------------------

local function update_tab2(self)

	makeData(self)
	
	imgui.text_colored(" Generation Survival Plot ", 1, 0, 0, 1 )
	imgui.plot_lines( "", 0, 310 * WINDOW_SCALE, 120 * WINDOW_SCALE, self.values_hist )

	imgui.separator()

	imgui.text_colored(" Generation Diversity Plot ", 0, 0, 1, 1 )
	imgui.plot_lines( "", 0, 310 * WINDOW_SCALE, 120 * WINDOW_SCALE, self.values_hist )

	imgui.separator()

	imgui.text_colored(" Diversity Histogram ", 0, 1, 0, 1 )
	imgui.plot_histogram( "", 0, 310 * WINDOW_SCALE, 120 * WINDOW_SCALE, self.values_line )
end

--------------------------------------------------------------------------------

local function update_tab3(self)

	local flags = imgui.WINDOWFLAGS_NOMOVE
	flags = bit.bor( flags, imgui.WINDOWFLAGS_NORESIZE )
	flags = bit.bor( flags, imgui.WINDOWFLAGS_NOCOLLAPSE )
	flags = bit.bor( flags, imgui.WINDOWFLAGS_HORIZONTALSCROLLBAR )
	imgui.begin_child("", 0, 0, false, flags)

	imgui.end_child()
end

--------------------------------------------------------------------------------

function update(self, dt)

	imgui.set_next_window_pos( 5, 5 )
	local lefty = 635
	if(self.selected_model == 1) then lefty = 260 end
	imgui.set_next_window_size(315 * WINDOW_SCALE, lefty * WINDOW_SCALE)
	
	local flags = imgui.WINDOWFLAGS_NOMOVE
	flags = bit.bor( flags, imgui.WINDOWFLAGS_NORESIZE )
	flags = bit.bor( flags, imgui.WINDOWFLAGS_NOCOLLAPSE )
	flags = bit.bor( flags, imgui.WINDOWFLAGS_NODECORATION )
	imgui.begin_window("Defold Wave Function Collapse", true, flags)

	imgui.text("Thanks to mxgmn for the Wave Function Collapse information.")
	imgui.text("https://github.com/mxgmn/WaveFunctionCollapse")
	imgui.separator()

	imgui.text_colored(" Select Sample: ", 1, 1, 0, 1 )
	if imgui.button("Run Sample") then
		runNext(self)
	end

	imgui.same_line(140)

	local changed, sample = imgui.combo("##sample", self.selected_sample, SAMPLES)
	if changed then
		self.selected_sample = sample
		
		local v = SAMPLES_RUNNABLES[ self.selected_sample ]
		if(v) then 
			if(v.overlap == true) then
				self.selected_model = 2
			else
				self.selected_model = 1
			end
		end
		updateSamples(self)	
		getSampleParams(self)
	end
	
	imgui.separator()
	imgui.text_colored(" ", 1, 1, 1, 1 )
	
	imgui.separator()

	imgui.begin_tab_bar("tabs")

	local tab1_open = imgui.begin_tab_item("Wave Function Params")
	if tab1_open then
		update_tab1(self)
		imgui.end_tab_item()
	end

	-- local tab2_open = imgui.begin_tab_item("Graphs")
	-- if tab2_open then
	-- 	update_tab2(self)
	-- 	imgui.end_tab_item()
	-- end
	-- 
	-- local tab3_open = imgui.begin_tab_item("Agent")
	-- if tab3_open then 
	-- 	update_tab3(self)
	-- 	imgui.end_tab_item()
	-- end

	imgui.end_tab_bar()	
	imgui.end_window()
		
	imgui.set_next_window_pos( 320 * WINDOW_SCALE, 5 )
	imgui.set_next_window_size(635 * WINDOW_SCALE, 635 * WINDOW_SCALE)

	local flags = imgui.WINDOWFLAGS_NOMOVE
	flags = bit.bor( flags, imgui.WINDOWFLAGS_NORESIZE )
	flags = bit.bor( flags, imgui.WINDOWFLAGS_NOCOLLAPSE )
	flags = bit.bor( flags, imgui.WINDOWFLAGS_NODECORATION )
	imgui.begin_window("Generation 1", true, flags)
	-- local img_data = buffer.get_bytes(self.buffer_info.buffer, hash("rgba"))
	-- local img = imgui.image_load_rawdata( "image1", self.buffer_info.width, self.buffer_info.height, img_data )
	if(self.image_select and self.totalfiles[self.image_select]) then
		local finfo = self.totalfiles[self.image_select]
		imgui.image_add(finfo.id, 625 * WINDOW_SCALE, 625 * WINDOW_SCALE)
	end

	imgui.draw_rect_filled( 320 * WINDOW_SCALE + 8, 10, 635 * WINDOW_SCALE, 30, 0xff000000 )
	imgui.set_cursor_pos( 10, 10 )
	if imgui.button(" < ") and self.image_select then
		self.image_select = self.image_select - 1 
		if(self.image_select < 1) then self.image_select = table.count(self.totalfiles) end
		-- drawBuffer(self)
	end
	imgui.same_line(35)
	imgui.text_colored(string.format(" %03d ", self.image_select or 0), 0.9, 0.9, 0.9, 1 )
	imgui.same_line(70)
	if imgui.button(" > ") and self.image_select then
		self.image_select = self.image_select + 1 
		if(self.image_select > table.count(self.totalfiles)) then self.image_select = 1 end
		-- drawBuffer(self)
	end
	imgui.same_line(270)

	local fname = ""
	if(self.image_select) then fname = self.totalfiles[self.image_select].filename end 
	imgui.text_colored(fname, 0.9, 0.9, 0.9, 1 )
	imgui.end_window()

	if(self.selected_model == 1) then 
		tilemapNeighborMaker(self)	
	end
end

--------------------------------------------------------------------------------


function on_input(self, action_id, action)
	
	self.mouse.x = action.x 
	self.mouse.y = action.y
end

--------------------------------------------------------------------------------
